{"version":3,"sources":["Components/Todo/Todo.tsx","Components/TodosList/TodosList.tsx","Helpers/api.ts","App.tsx","index.tsx"],"names":["TodoCard","todo","key","id","className","title","user","name","completed","TodosList","todos","map","getAll","URL","a","fetch","then","response","json","App","useState","setTodos","loading","setLoading","isLoaded","setIsLoaded","isError","setIsError","sortType","setSortType","startLoadingFromServer","todosFromServer","usersFromServer","preparedTodos","find","userId","visibleTodos","sort","b","localeCompare","getVisibleTodos","length","type","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"iSAOaA,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,wBACEC,IAAKD,EAAKE,GACVC,UAAU,cAEV,2BAAIH,EAAKI,OACT,2BAAIJ,EAAKK,MAAQL,EAAKK,KAAKC,MAC1BN,EAAKO,UACJ,mCAEA,4CCTOC,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,wBAAIN,UAAU,cACXM,EAAMC,KAAI,SAAAV,GAAI,OACb,kBAAC,EAAD,CAAUA,KAAMA,EAAMC,IAAKD,EAAKE,UCVlCS,EAAM,uCAAG,WAAUC,GAAV,SAAAC,EAAA,+EACNC,MAHO,iEAGSF,GACpBG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAFhB,2CAAH,sDCiGGC,G,MArEO,WAAO,IAAD,EACAC,mBAAiB,IADjB,mBACnBV,EADmB,KACZW,EADY,OAEID,oBAAS,GAFb,mBAEnBE,EAFmB,KAEVC,EAFU,OAGMH,oBAAS,GAHf,mBAGnBI,EAHmB,KAGTC,EAHS,OAIIL,oBAAS,GAJb,mBAInBM,EAJmB,KAIVC,EAJU,OAKMP,mBAAS,IALf,mBAKnBQ,EALmB,KAKTC,EALS,KAOpBC,EAAsB,uCAAG,gCAAAhB,EAAA,6DAC7BS,GAAW,GADkB,kBD7BcX,EAAO,eC6BrB,cAIrBmB,EAJqB,gBD9BcnB,EAAO,eC8BrB,OAKrBoB,EALqB,OAOrBC,EAAgBF,EAAgBpB,KAAI,SAAAV,GAAI,kCACzCA,GADyC,IAE5CK,KAAM0B,EAAgBE,MAAK,SAAA5B,GAAI,OAAIA,EAAKH,KAAOF,EAAKkC,eAGtDd,EAASY,GACTR,GAAY,GAbe,kDAe3BE,GAAW,GAfgB,0DAAH,qDAwBtBS,EArDgB,SAAC1B,EAAekB,GACtC,OAAQA,GACN,IAAK,QACH,OAAO,YAAIlB,GAAO2B,MAAK,SAACvB,EAAGwB,GACzB,OAAOxB,EAAET,MAAMkC,cAAcD,EAAEjC,UAGnC,IAAK,aACH,OAAO,YAAIK,GAAO2B,MAAK,SAACvB,GAAD,OAAQA,EAAEN,UAAY,GAAK,KAEpD,IAAK,OACH,OAAO,YAAIE,GAAO2B,MAAK,SAACvB,EAAGwB,GACzB,OAAOxB,EAAER,MAAQgC,EAAEhC,KACfQ,EAAER,KAAKC,KAAKgC,cAAcD,EAAEhC,KAAKC,MACjC,KAGR,QACE,OAAOG,GAmCU8B,CAAgB9B,EAAOkB,GAE5C,OACE,yBAAKxB,UAAU,OACXoB,EAQGd,EAAM+B,OAAS,GAEd,oCACE,yBAAKrC,UAAU,iBACb,4BAAQsC,KAAK,SAASC,QAAS,kBAAMd,EAAY,MAC/C,wCAEF,4BAAQa,KAAK,SAASC,QAAS,kBAAMd,EAAY,UAC/C,+CAEF,4BAAQa,KAAK,SAASC,QAAS,kBAAMd,EAAY,WAC/C,gDAEF,4BAAQa,KAAK,SAASC,QAAS,kBAAMd,EAAY,gBAC/C,sDAIJ,kBAAC,EAAD,CAAWnB,MAAO0B,KAzBxB,oCACE,4BAAQM,KAAK,SAASC,QAASb,EAAwBc,SAAUtB,GAC/D,8BAAQA,EAAmB,aAAT,SAEpB,2BAAII,GAAW,8BClEzBmB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8ccf9168.chunk.js","sourcesContent":["import React from 'react';\nimport Todo from '../../Helpers/api';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoCard: React.FC<Props> = ({ todo }) => (\n  <li\n    key={todo.id}\n    className=\"todo__item\"\n  >\n    <p>{todo.title}</p>\n    <p>{todo.user && todo.user.name}</p>\n    {todo.completed ? (\n      <p>Done</p>\n    ) : (\n      <p>In Progress</p>\n    )}\n  </li>\n);\n","import React from 'react';\nimport { TodoCard } from '../Todo/Todo';\nimport Todo from '../../Helpers/api';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodosList: React.FC<Props> = ({ todos }) => {\n  return (\n    <ul className=\"todo__list\">\n      {todos.map(todo => (\n        <TodoCard todo={todo} key={todo.id} />\n      ))}\n    </ul>\n  );\n};\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nconst getAll = async <T>(URL: string): Promise<T[]> => {\n  return fetch(API_URL + URL)\n    .then(response => response.json());\n};\n\nexport const getUsers = (): Promise<User[]> => getAll('/users.json');\nexport const getTodos = (): Promise<Todo[]> => getAll('/todos.json');\n\nexport interface Todo {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n  user?: User;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport default Todo;\n","import React, { useState } from 'react';\nimport { TodosList } from './Components/TodosList/TodosList';\nimport {\n  getUsers, getTodos, Todo,\n} from './Helpers/api';\n\nimport './App.css';\n\nconst getVisibleTodos = (todos: Todo[], sortType: string) => {\n  switch (sortType) {\n    case 'title':\n      return [...todos].sort((a, b) => {\n        return a.title.localeCompare(b.title);\n      });\n\n    case 'completion':\n      return [...todos].sort((a) => (a.completed ? 1 : -1));\n\n    case 'name':\n      return [...todos].sort((a, b) => {\n        return a.user && b.user\n          ? a.user.name.localeCompare(b.user.name)\n          : 0;\n      });\n\n    default:\n      return todos;\n  }\n}\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [sortType, setSortType] = useState('');\n\n  const startLoadingFromServer = async () => {\n    setLoading(true);\n\n    try {\n      const todosFromServer = await getTodos();\n      const usersFromServer = await getUsers();\n\n      const preparedTodos = todosFromServer.map(todo => ({\n        ...todo,\n        user: usersFromServer.find(user => user.id === todo.userId),\n      }));\n\n      setTodos(preparedTodos);\n      setIsLoaded(true);\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  // const reset = () => {\n  //   console.log('reset');\n  //   setTodos(todos);\n  // };\n\n  const visibleTodos = getVisibleTodos(todos, sortType);\n\n  return (\n    <div className=\"App\">\n      {!isLoaded ? (\n        <>\n          <button type=\"button\" onClick={startLoadingFromServer} disabled={loading}>\n            <span>{!loading ? 'Load' : 'Loading...'}</span>\n          </button>\n          <p>{isError && 'Please reload the page'}</p>\n        </>\n      ) : (\n          (todos.length > 0)\n          && (\n            <>\n              <div className=\"buttons__list\">\n                <button type=\"button\" onClick={() => setSortType('')}>\n                  <span>reset</span>\n                </button>\n                <button type=\"button\" onClick={() => setSortType('name')}>\n                  <span>sort by name</span>\n                </button>\n                <button type=\"button\" onClick={() => setSortType('title')}>\n                  <span>sort by title</span>\n                </button>\n                <button type=\"button\" onClick={() => setSortType('completion')}>\n                  <span>sort by completion</span>\n                </button>\n              </div>\n\n              <TodosList todos={visibleTodos} />\n            </>\n          )\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}